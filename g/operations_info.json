{
  "1": {
    "operation": "write",
    "description": "Generate text based on the table after other operations, providing insights and conclusions. This operation transforms data into a readable news story. Useful functions: N/A"
  },
  "2": {
    "operation": "select_row",
    "description": "Select a subset of rows based on specific criteria (e.g., score range, player, rally length). This allows focusing on particular game situations. Useful functions: `df.loc[]`, `df.iloc[]`"
  },
  "3": {
    "operation": "select_column",
    "description": "Select specific columns relevant to the analysis (e.g., `type`, `time`, `roundscore_A`, `roundscore_B`). Useful functions: `df[['column1', 'column2']]`"
  },
  "4": {
    "operation": "groupby",
    "description": "Group rows based on one or more columns (e.g., `player`, `type`, `lose_reason`) to calculate aggregate statistics. This helps identify trends and patterns. Useful functions: `df.groupby()`"
  },
  "5": {
    "operation": "aggregate",
    "description": "Calculate summary statistics (e.g., mean, median, standard deviation, count) for grouped data. This quantifies trends and differences. Useful functions: `df.agg()`"
  },
  "6": {
    "operation": "sort",
    "description": "Sort the data by one or more columns (e.g., `time`, `rally`, `roundscore_A`) to identify trends and patterns over time or score progression. Useful functions: `df.sort_values()`"
  },
  "7": {
    "operation": "filter",
    "description": "Remove rows based on specified conditions (e.g., rallies shorter than a certain time, specific `lose_reasons`). Allows focusing on relevant data subsets. Useful functions: `df[df['column'] > value]`"
  },
  "8": {
    "operation": "calculate",
    "description": "Create new columns based on existing data (e.g., rally duration, time between shots, score difference). This generates features for further analysis. Useful functions: `df['new_column'] = ...`"
  },
  "9": {
    "operation": "merge",
    "description": "Combine data from different sources or tables based on a common column. Useful functions: `pd.merge()`"
  },
  "10": {
    "operation": "join",
    "description": "Combine columns of two potentially different-sized DataFrames into a single DataFrame. Useful functions: `df.join()`"
  },
  "11": {
    "operation": "pivot_table",
    "description": "Summarize data by creating a table that aggregates values based on two or more columns. Useful functions: `pd.pivot_table()`"
  },
  "12": {
    "operation": "rolling_window",
    "description": "Calculate statistics over a moving window of rows (e.g., average rally duration over the last 10 rallies). Useful functions: `df.rolling()`"
  },
  "13": {
    "operation": "shift",
    "description": "Shift the values in a column by a certain number of rows.  Useful functions: `df['column'].shift()`"
  },
  "14": {
    "operation": "value_counts",
    "description": "Count the occurrences of each unique value in a column. Useful functions: `df['column'].value_counts()`"
  },
  "15": {
    "operation": "corr",
    "description": "Calculate the correlation between columns. Useful functions: `df.corr()`"
  }
}